<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Serein&#39;s blog</title>
  
  <subtitle>持续学习</subtitle>
  <link href="https://mao0824.github.io.git/atom.xml" rel="self"/>
  
  <link href="https://mao0824.github.io.git/"/>
  <updated>2021-01-06T02:44:21.453Z</updated>
  <id>https://mao0824.github.io.git/</id>
  
  <author>
    <name>Serein</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>chrome插件</title>
    <link href="https://mao0824.github.io.git/2021/01/06/chrome%E6%8F%92%E4%BB%B6/"/>
    <id>https://mao0824.github.io.git/2021/01/06/chrome%E6%8F%92%E4%BB%B6/</id>
    <published>2021-01-06T02:37:35.000Z</published>
    <updated>2021-01-06T02:44:21.453Z</updated>
    
    <content type="html"><![CDATA[<p>持续更新~~~~</p><h3 id="Imagus——悬停放大图片"><a href="#Imagus——悬停放大图片" class="headerlink" title="Imagus——悬停放大图片"></a>Imagus——悬停放大图片</h3><p>鼠标指针悬停在链接或缩略图上时直接在当前页面的弹出视图上显示这些图片、HTML5 视频/音频和内容专辑。</p><h3 id="LastPass-Free-Password-Manager"><a href="#LastPass-Free-Password-Manager" class="headerlink" title="LastPass: Free Password Manager"></a>LastPass: Free Password Manager</h3><p>LastPass: Free Password Manager，是一款世界上有名的密码管理软件之一，好评都是上亿的。一般来说，安装这个插件之后，只要你使用主密码登录LastPass并记录相关的账号信息什么，那么LastPass就会安全地存储所有密码并将其填写在网页上。</p><h3 id="Simple-Allow-Copy——复制所有的一切"><a href="#Simple-Allow-Copy——复制所有的一切" class="headerlink" title="Simple Allow Copy——复制所有的一切"></a>Simple Allow Copy——复制所有的一切</h3><p>一个可以让你复制网页上任何文字的插件！</p><h3 id="划词翻译——翻译神器"><a href="#划词翻译——翻译神器" class="headerlink" title="划词翻译——翻译神器"></a>划词翻译——翻译神器</h3><p>翻译网页内容谷歌浏览自带就有翻译，但这种翻译是针对整个网页的。单个英语的情况反而无法翻译！</p><h3 id="Momentum"><a href="#Momentum" class="headerlink" title="Momentum"></a>Momentum</h3><p>我爱它的简洁、优雅，如同Chrome一样。每打开一个Tab页面映入眼前的一张精美的图片，令人非常心旷神怡。当然还有其它功能，如办事项、天气、时钟等。</p><h3 id="Night-Eye"><a href="#Night-Eye" class="headerlink" title="Night Eye"></a>Night Eye</h3><p>你可以为任何网站上开启夜间模式。</p><p>在PC端浏览网页时可以有效保护你的眼睛，虽然目前夜间模式在手机端已经很普遍，但是PC端较少被用到，如果你是夜猫子，也需要长时间使用电脑，那么它你尤为需要。</p><h3 id="PDF-Viewer"><a href="#PDF-Viewer" class="headerlink" title="PDF Viewer"></a>PDF Viewer</h3><p>就是打开PDF可以复制，可以编辑</p><h3 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a>Tampermonkey</h3><h3 id="Bilibili-Evolved"><a href="#Bilibili-Evolved" class="headerlink" title="Bilibili Evolved"></a><strong>Bilibili Evolved</strong></h3><p>B站美化工具（还有下载视频等功能）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;持续更新~~~~&lt;/p&gt;
&lt;h3 id=&quot;Imagus——悬停放大图片&quot;&gt;&lt;a href=&quot;#Imagus——悬停放大图片&quot; class=&quot;headerlink&quot; title=&quot;Imagus——悬停放大图片&quot;&gt;&lt;/a&gt;Imagus——悬停放大图片&lt;/h3&gt;&lt;p&gt;鼠标指针悬停</summary>
      
    
    
    
    <category term="插件推荐" scheme="https://mao0824.github.io.git/categories/%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="chrome优化" scheme="https://mao0824.github.io.git/tags/chrome%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>static final abstract</title>
    <link href="https://mao0824.github.io.git/2020/12/31/static-final-abstract/"/>
    <id>https://mao0824.github.io.git/2020/12/31/static-final-abstract/</id>
    <published>2020-12-31T01:57:45.000Z</published>
    <updated>2020-12-31T02:03:53.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><p>关键字—修饰符    变量、方法、代码块、内部类</p><h2 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h2><p>  静态修饰的变量随着类的加载（方法区的静态常量池）而加载到方法区的静态区，静态区会对存储的静态变量赋予默认系统初始值。静态变量也叫类变量（静态变量与类同级），静态变量可以通过类名.的形式调用也可以通过对象调用。</p><p>  静态变量在类所有的对象里都是一样的地址值，不同对象都指向同一个静态变量—共享   </p><p>  属性什么时候加上static?</p><p>  1、不通过对象调用  2、属性是可以被共享时</p><p>  静态变量可以定义在构造方法中？</p><p>  不可以，方法只有被调用时才能被执行，方法里的内容才能执行，但是静态变量随着类的加载而加载。</p><p><img src="https://cdn.jsdelivr.net/gh/mao0824/pictureBed@latest/2020/12/31/4b9a7bbdbae7020942629f5bd2f010f1.png"></p><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>  静态方法随着类的加载（静态常量池）而加载到方法区的静态区，不会有默认初始值，当静态方法被调用是加载到栈中执行。静态方法也叫类方法，可以通过类名.调用也可以通过对象调用。</p><p>  静态方法中可以定义静态变量？</p><p>  不可以，方法里的内容只能在被调用时才执行，但是静态变量随着类的加载而加载。</p><p>  静态方法里可以使用this？ </p><p>  不可以，静态方法是和类同级，this是和对象同级，类级别优先对象级别先加载。</p><p>  main方法可以直接调用非静态方法？</p><p>  不能，非静态可以直接调用所有的静态信息，静态只能直接调用静态信息。</p><h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><p> 关键字—修饰符      数据、方法、类</p><h2 id="最终数据"><a href="#最终数据" class="headerlink" title="最终数据"></a>最终数据</h2><ul><li>如果final修饰的是基本类型数据，就值不能改变，就变为了常量。</li><li>如果final修饰的是引用数据类型，就是地址值不能改变但是元素值仍然可以改变，变为了常量。</li><li>如果final修饰的是成员变量就要保证成员变量在创建对象之前给值。</li><li>如果final和static共同修饰（静态常量）保证在类加载完成之前给值。</li></ul><h2 id="最终方法"><a href="#最终方法" class="headerlink" title="最终方法"></a>最终方法</h2><p>可以重载不可以重写（连继承都没有）</p><h2 id="最终类"><a href="#最终类" class="headerlink" title="最终类"></a>最终类</h2><p>  final修饰的类不可以被继承，但可以继承别的类。</p><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h1><p>关键字—修饰符  方法、类</p><p>如果所有的子类对父类中某个方法都进行了不同程度的重写，那么此时父类中的这个方法的方法体就没有任何意义，就可以把这个方法体去掉加上abstract关键字进行修饰就变成了抽象方法，一个类中出现抽象方法类就要变成抽象类。</p><ul><li>abstract修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类。</li><li>抽象类中可以没有抽象方法，但有抽象方法的类一定要声明为抽象类。</li><li>抽象类不能使用new关键字来创建对象。它只是用来让子类继承的。</li><li>抽象方法只有方法的声明，没有方法的实现。</li><li>子类继承抽象类，那就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。</li></ul><p>抽象类可以创建对象？</p><p>不可以，对象如果创建出来，可能会调用到抽象方法就会报错。</p><p>抽象类可以定义属性和方法？</p><p>可以</p><p>抽象方法可以被private/static/final分别修饰吗？</p><p>抽象方法就是为了重写，但是被修饰之后就不会有重写</p><p>抽象类可以被final修饰？</p><p>不可以，修饰之后不能被继承。</p><p> 抽象类的含义/意义？</p><p>1、为了满足类提供属性和方法但是不能创建对象场景。</p><p>2、就是为了继承延展功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;static&quot;&gt;&lt;a href=&quot;#static&quot; class=&quot;headerlink&quot; title=&quot;static&quot;&gt;&lt;/a&gt;static&lt;/h1&gt;&lt;p&gt;关键字—修饰符    变量、方法、代码块、内部类&lt;/p&gt;
&lt;h2 id=&quot;静态变量&quot;&gt;&lt;a href=&quot;#静</summary>
      
    
    
    
    <category term="Java" scheme="https://mao0824.github.io.git/categories/Java/"/>
    
    
    <category term="关键字" scheme="https://mao0824.github.io.git/tags/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>Java中五种常见的代码块</title>
    <link href="https://mao0824.github.io.git/2020/12/29/Java%E4%B8%AD%E4%BA%94%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
    <id>https://mao0824.github.io.git/2020/12/29/Java%E4%B8%AD%E4%BA%94%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E4%BB%A3%E7%A0%81%E5%9D%97/</id>
    <published>2020-12-29T00:45:39.000Z</published>
    <updated>2020-12-29T00:48:39.090Z</updated>
    
    <content type="html"><![CDATA[<p>代码块：代码块是一种常见的代码形式。他用大括号“｛｝”将多行代码封装在一起，形成一个独立的代码区，这就构成了代码块。</p><ul><li>普通代码块（成员/局部代码块）</li><li>构造代码块</li><li>构造方法（特殊代码块）</li><li>静态代码块</li><li>执行顺序</li></ul><h2 id="普通代码块"><a href="#普通代码块" class="headerlink" title="普通代码块"></a>普通代码块</h2><p>最常见的代码块，在方法内用{ } 括起来的数据，就是普通代码块。</p><p><strong>在代码块中的变量只在代码块中生效</strong></p><p>作用：</p><p>限定变量的生命周期，及早的释放无用变量（因为通常局部变量的生命周期包含整个方法域，在方法结束后才会进行回收），提高内存的利用率。</p><h2 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h2><p>既然有方法体内的代码块，那肯定有<strong>java类中方法体之外</strong>的代码块，就变成了现在这个——构造代码块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void testMethod() &#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​      System.out.println(&quot;oh yo yo yo~&quot;);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>构造代码块，顾名思义，它是用来对对象进行初始化的（给所有对象进行初始化）。</p><p><strong>构造代码块与相应的构造方法合并了</strong>，换句话说，就是<strong>构造代码块依托于构造方法执行，且先执行构造代码块中的代码，再执行相应的构造方法。</strong></p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>构造函数的命名必须和类名完全相同,在java中普通函数可以和构造函数同名，但是必须带有返回值；</p><p>构造函数的功能主要用于在类的对象创建时定义初始化的状态。它没有返回值，也不能用void来修饰。这就保证了它不仅什么也不用自动返回，而且根本不能有任何选择。而其他方法都有返回值，即使是void返回值。尽管方法体本身不会自动返回什么，但仍然可以让它返回一些东西，而这些东西可能是不安全的；</p><p>构造函数不能被直接调用，必须通过new运算符在创建对象时才会自动调用；而一般的方法是在程序执行到它的时候被调用的；</p><p>当定义一个类的时候，通常情况下都会显示该类的构造函数，并在函数中指定初始化的工作也可省略，不过Java编译器会提供一个默认的构造函数.此默认构造函数是不带参数的。而一般的方法不存在这一特点；</p><h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><p>静态代码块就是在{}的前面加上static的修饰符，它出现的位置应该是java类中，方法体之外：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  static &#123;</span><br><span class="line"></span><br><span class="line">​    System.out.println(&quot;static yo~&quot;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态代码块就像静态变量一样，<strong>其会在类加载时运行，而且只运行一次</strong>。</p><p>一个类中<strong>可以包含多个静态代码块</strong>，其会<strong>按照书写顺序</strong>依次执行。</p><p>程序加载和执行顺序:</p><p>  父类静态信息-&gt;子类静态信息-&gt;父类对象级别-&gt;子类对象级别</p><p>作用：</p><p>如果说，在项目启动时你有许多的配置文件要加载，或者你要建立连接的时候（比如JDBC连接数据库的时候），就可以使用静态代码块进行配置，这些代码会<strong>随着项目的启动（一般与项目相关的类都会进行加载，除非你根本没有用到这个类）而进行执行</strong>。</p><h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><p>   同步代码块的使用主要跟线程相关，它是共用同一把锁的代码块（也就是说其访问互斥）。</p><p>同步代码块传入的参数称为同步监视器（锁），当线程开始执行同步代码块时必须先获得其对应锁，执行完成后对锁进行释放。</p><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p>对象的初始化顺序：</p><ol><li><p>首先执行父类静态的内容，父类静态的内容执行完毕后，接着去执行子类的静态的内容，（静态内容只会执行一次）</p></li><li><p>当子类的静态内容执行完毕之后，再去看父类有没有构造代码块，如果有就执行父类的构造代码块，父类的构造代码块执行完毕，接着执行父类的构造方法；</p></li><li><p>父类的构造方法执行完毕之后，它接着去看子类有没有构造代码块，如果有就执行子类的构造代码块。子类的构造代码块执行完毕再去执行子类的构造方法。</p><p>总之一句话，静态代码块内容先执行，接着执行父类构造代码块和构造方法，然后执行子类构造代码块和构造方法。</p></li></ol><p><strong>在静态代码块中不能访问成员变量，根本原因在于: 在类初始化时 静态资源是由于类的成员加载的，此时类的成员并没有被加载进jvm**</strong>。**</p><p>​      <strong>Java中的静态方法在class文件被加载时就会分配内存，而非静态方法要在程序运行过程中类实例化后才会存在；因此静态方法可以用类名来调用，不用实例化，也可以用对象名来调用；而非静态方法只能在类实例化之后用对象名来调用；</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;代码块：代码块是一种常见的代码形式。他用大括号“｛｝”将多行代码封装在一起，形成一个独立的代码区，这就构成了代码块。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通代码块（成员/局部代码块）&lt;/li&gt;
&lt;li&gt;构造代码块&lt;/li&gt;
&lt;li&gt;构造方法（特殊代码块）&lt;/li&gt;
&lt;li&gt;静态代码</summary>
      
    
    
    
    <category term="Java" scheme="https://mao0824.github.io.git/categories/Java/"/>
    
    
    <category term="代码块" scheme="https://mao0824.github.io.git/tags/%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>值传递和引用传递</title>
    <link href="https://mao0824.github.io.git/2020/12/28/%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/"/>
    <id>https://mao0824.github.io.git/2020/12/28/%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/</id>
    <published>2020-12-28T06:30:08.000Z</published>
    <updated>2020-12-28T06:42:08.718Z</updated>
    
    <content type="html"><![CDATA[<p>值传递：(形式参数类型是基本数据类型)：方法调用时，实际参数把它的值传递给对应的形式参数，形式参数只是用实际参数的值初始化自己的存储单元内容，是两个不同的存储单元，所以方法执行中形式参数值的改变不影响实际参数的值。</p><p>引用传递：(形式参数类型是引用数据类型参数)：也称为传地址。方法调用时，实际参数是对象(或数组)，这时实际参数与形式参数指向同一个地址，在方法执行中，对形式参数的操作实际上就是对实际参数的操作，这个结果在方法结束后被保留了下来，所以方法执行中形式参数的改变将会影响实际参数。</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>（1）：“在Java里面参数传递都是按值传递”这句话的意思是：按值传递是传递的值的拷贝，按引用传递其实传递的是引用的地址值，所以统称按值传递。</p><p>（2）：在Java里面只有基本类型和按照下面这种定义方式的String是按值传递，其它的都是按引用传递。就是直接使用双引号定义字符串方式：String str = “Java”</p><p>基本类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class Demo01&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;值传递</span><br><span class="line"></span><br><span class="line">inti&#x3D;100;</span><br><span class="line"></span><br><span class="line">*addInt*(i);</span><br><span class="line"></span><br><span class="line">System.*out*.println(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">public static voida ddInt(int i)&#123;</span><br><span class="line"></span><br><span class="line">i+&#x3D;200;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此Demo输出结果输出的是100，而不是300，原因是：</p><p>1.程序运行时，main（）方法先入栈，然后给变量i分配内存。</p><p>2.当运行到addInt（i）时，addInt（）方法入栈，当方法入栈时，会给局部变量和形参变量（i）分配内存，也就是说在addInt（）方法栈中，也有一个名为a，值为100的变量。</p><p>3.由于i+=200是在addInt()方法栈里面运行的，所以只会改变addInt（）方法栈里面a的值，而不会改变main（）方法栈中的值。</p><p>引用类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class Demo02&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;引用传递</span><br><span class="line"></span><br><span class="line">StringBuffer stringBuffer &#x3D; new StringBuffer(&quot;烤肠&quot;);</span><br><span class="line"></span><br><span class="line">*change*(stringBuffer);</span><br><span class="line"></span><br><span class="line">System.*out*.println(stringBuffer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">public static void change(StringBuffer stringBuffer)&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">stringBuffer.append(&quot;烤肠真好吃哦&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此Demo输出结果是烤肠真好吃，原因是：</p><p>与基本类型不一样，主要是StringBuilder是引用类型。因此new StringBuilder(“烤肠”)的内存是分配在堆区。而在栈区的变量(builder)只保存一个地址。因此，main和changeVal两个方法栈的builder变量都指向了同一块内存。故当changVal方法中改变builder的值，main中的builder也会变化。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class Demo03&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Strings &#x3D; &quot;杜兰特&quot;;</span><br><span class="line"></span><br><span class="line">*addString*(s);</span><br><span class="line"></span><br><span class="line">System.*out*.println(s);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">public static void addString(String s)&#123;</span><br><span class="line"></span><br><span class="line">s +&#x3D; &quot;和欧文&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Demo3输出结果是杜兰特。str记录了对象的地址，那么str的值应该也被改变了才对？为什么不对呢？原因是：</p><p>这跟String的”特性”有关，String会被存放在字符串常量池，而且String是不可被改变的(final)。</p><p>1.main()和changeVal()方法中的str都指向了常量池中的”hello”字符串。</p><p><img src="https://cdn.jsdelivr.net/gh/mao0824/pictureBed@latest/2020/12/28/f15d821c65ec983537e5a3e6f1a4495b.png"></p><p>2.执行str+=” 和欧文”时，由于String是不可变的，所以不可能直接在”杜兰特”上做修改。这时会在常量池中新增一个”杜兰特和欧文”的字符串，并将地址传给changeVal()方法栈中的str.</p><p><img src="https://cdn.jsdelivr.net/gh/mao0824/pictureBed@latest/2020/12/28/eb4732cc194ba05c1ab4e54827eaea72.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;值传递：(形式参数类型是基本数据类型)：方法调用时，实际参数把它的值传递给对应的形式参数，形式参数只是用实际参数的值初始化自己的存储单元内容，是两个不同的存储单元，所以方法执行中形式参数值的改变不影响实际参数的值。&lt;/p&gt;
&lt;p&gt;引用传递：(形式参数类型是引用数据类型参数)</summary>
      
    
    
    
    <category term="Java" scheme="https://mao0824.github.io.git/categories/Java/"/>
    
    
    <category term="值传递" scheme="https://mao0824.github.io.git/tags/%E5%80%BC%E4%BC%A0%E9%80%92/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件推荐</title>
    <link href="https://mao0824.github.io.git/2020/12/28/IDEA%E5%A5%BD%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    <id>https://mao0824.github.io.git/2020/12/28/IDEA%E5%A5%BD%E7%94%A8%E6%8F%92%E4%BB%B6/</id>
    <published>2020-12-28T02:51:41.000Z</published>
    <updated>2020-12-28T01:17:02.664Z</updated>
    
    <content type="html"><![CDATA[<p>持续更新~~~~~</p><h4 id="一、Translation-插件"><a href="#一、Translation-插件" class="headerlink" title="一、Translation 插件"></a>一、<strong>Translation</strong> <strong>插件</strong></h4><p>这款插件是谷歌翻译插件，在idea里面也可以将英文翻译成中文，当然你也可以设置成其他的语言。</p><p><img src="https://cdn.jsdelivr.net/gh/mao0824/pictureBed@latest/2020/12/22/00e2d54a2108e82f71ade9792293099b.png"></p><h4 id="二、Material-Theme-UI"><a href="#二、Material-Theme-UI" class="headerlink" title="二、Material Theme UI"></a>二、<strong>Material Theme UI</strong></h4><p>对于很多人而言，写代码时略显枯燥的，如果能够安装自己喜欢的主题将为开发工作带来些许乐趣。</p><p>IDEA 支持各种主题插件，其中最出名的当属 Material Theme UI。</p><p>安装后，可以从该插件内置的各种风格个选择自己最喜欢的一种。</p><h4 id="三、Atom-Material-Icons"><a href="#三、Atom-Material-Icons" class="headerlink" title="三、Atom Material Icons"></a>三、<strong>Atom Material Icons</strong></h4><p>图标样式</p><p><img src="https://cdn.jsdelivr.net/gh/mao0824/pictureBed@latest/2020/12/22/e7a1473d315879eb7d282b73f0d271e3.png"></p><h4 id="四、Nyan-Progress-Bar插件"><a href="#四、Nyan-Progress-Bar插件" class="headerlink" title="四、Nyan Progress Bar插件"></a>四、<strong>Nyan Progress Bar插件</strong></h4><p>安装上文已经提过，这里就不再重复，此插件是将原来的进度条美化，变成一个可爱的彩虹猫，编程的同时，有这么只猫陪着，也算是赏心悦目了，效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/mao0824/pictureBed@latest/2020/12/22/38fbd4d324aa1143599c08eb2c59b196.png"></p><h4 id="五、Codota"><a href="#五、Codota" class="headerlink" title="五、Codota"></a>五、<strong>Codota</strong></h4><p>代码提示工具，扫描你的代码后，根据你的敲击完美提示</p><p>Codota基于数百万个开源Java程序和您的上下文来完成代码行，从而帮助您以更少的错误更快地进行编码。</p><p>Alibaba Java Coding Guidelines</p><p>阿里巴巴的编码规约检查插件，检查你的编码习惯，让你更规范。</p><h4 id="六、Grep-Console"><a href="#六、Grep-Console" class="headerlink" title="六、Grep Console"></a>六、<strong>Grep Console</strong></h4><p>控制台日志分组输出颜色</p><h4 id="七、Chinese-Simplified-Language-Pack-EAP"><a href="#七、Chinese-Simplified-Language-Pack-EAP" class="headerlink" title="七、Chinese (Simplified) Language Pack EAP"></a>七、<strong>Chinese (Simplified) Language Pack EAP</strong></h4><p>添加中文作为 IDE 界面语言</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;持续更新~~~~~&lt;/p&gt;
&lt;h4 id=&quot;一、Translation-插件&quot;&gt;&lt;a href=&quot;#一、Translation-插件&quot; class=&quot;headerlink&quot; title=&quot;一、Translation 插件&quot;&gt;&lt;/a&gt;一、&lt;strong&gt;Translation</summary>
      
    
    
    
    <category term="插件推荐" scheme="https://mao0824.github.io.git/categories/%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="IDEA优化" scheme="https://mao0824.github.io.git/tags/IDEA%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + GitHub 博客绑定自己的域名</title>
    <link href="https://mao0824.github.io.git/2020/12/23/Hexo-GitHub-%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D/"/>
    <id>https://mao0824.github.io.git/2020/12/23/Hexo-GitHub-%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D/</id>
    <published>2020-12-23T05:53:19.000Z</published>
    <updated>2020-12-24T02:03:22.427Z</updated>
    
    <content type="html"><![CDATA[<p>前提是自己已经搭建完博客，并可以进行正常访问。</p><h4 id="1-准备好一个域名"><a href="#1-准备好一个域名" class="headerlink" title="1.准备好一个域名"></a>1.准备好一个域名</h4><p>可以选择在万网，阿里云，腾讯云等提供域名注册的服务商处买一个或者免费嫖一个域名。</p><p><a href="https://mi.aliyun.com/">https://mi.aliyun.com/</a></p><h4 id="2-在博客的source目录下添加CNAME文件"><a href="#2-在博客的source目录下添加CNAME文件" class="headerlink" title="2.在博客的source目录下添加CNAME文件"></a>2.在博客的source目录下添加CNAME文件</h4><p>注意要在source目录下，如果放在别处或者在GitHub Pages仓库创建，等下一次提交的时候，会把CNAME文件覆盖掉，从而达不到效果。</p><p><u>CNAME文件没有文件后缀</u></p><p>文件里填写要绑定的域名且不要包含Http://和www</p><p><img src="https://cdn.jsdelivr.net/gh/mao0824/pictureBed@latest/2020/12/23/a3c4c47af4f33974c2736894895b5a68.png"></p><h4 id="3-添加域名解析"><a href="#3-添加域名解析" class="headerlink" title="3.添加域名解析"></a>3.添加域名解析</h4><h5 id="3-1查看username-github-io的ip"><a href="#3-1查看username-github-io的ip" class="headerlink" title="3.1查看username.github.io的ip"></a>3.1查看username.github.io的ip</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping username.github.io</span><br></pre></td></tr></table></figure><h5 id="3-2修改你的域名解析记录"><a href="#3-2修改你的域名解析记录" class="headerlink" title="3.2修改你的域名解析记录"></a>3.2修改你的域名解析记录</h5><p><img src="https://cdn.jsdelivr.net/gh/mao0824/pictureBed@latest/2020/12/23/90e78b8d69caa86b2b9a47c8bff33f66.png"></p><p>添加两个A记录，用查到的ip，一个主机记录为：“www”，一个为“@”，这样通过<a href="http://zouma.online/">zouma.online</a>和<a href="http://zouma.online/">www.zouma.online</a>都能访问到你的博客了。</p><p><img src="https://cdn.jsdelivr.net/gh/mao0824/pictureBed@latest/2020/12/23/19c36dc2d6d3d3dd5f084de442231e77.png"></p><h4 id="4-等几分钟分钟左右，刷新浏览器，用你自己域名访问下试试"><a href="#4-等几分钟分钟左右，刷新浏览器，用你自己域名访问下试试" class="headerlink" title="4.等几分钟分钟左右，刷新浏览器，用你自己域名访问下试试"></a>4.等几分钟分钟左右，刷新浏览器，用你自己域名访问下试试</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前提是自己已经搭建完博客，并可以进行正常访问。&lt;/p&gt;
&lt;h4 id=&quot;1-准备好一个域名&quot;&gt;&lt;a href=&quot;#1-准备好一个域名&quot; class=&quot;headerlink&quot; title=&quot;1.准备好一个域名&quot;&gt;&lt;/a&gt;1.准备好一个域名&lt;/h4&gt;&lt;p&gt;可以选择在万网，阿里云</summary>
      
    
    
    
    <category term="教程" scheme="https://mao0824.github.io.git/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://mao0824.github.io.git/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + GitHub 实现个人博客</title>
    <link href="https://mao0824.github.io.git/2020/12/21/Hexo-GitHub-%E5%AE%9E%E7%8E%B0%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://mao0824.github.io.git/2020/12/21/Hexo-GitHub-%E5%AE%9E%E7%8E%B0%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-12-21T08:05:13.000Z</published>
    <updated>2020-12-24T02:01:17.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><h4 id="1-安装nodejs"><a href="#1-安装nodejs" class="headerlink" title="1.安装nodejs"></a>1.安装nodejs</h4><p>下载地址：<a href="https://nodejs.org/">https://nodejs.org/</a>  下载后默认安装即可</p><p>测试安装是否成功：node -v</p><p>​                                   npm -v</p><p>安装nodejs默认安装npm包管理器，Hexo框架要通过npm管理工具进行安装</p><h4 id="2-安装Hexo框架"><a href="#2-安装Hexo框架" class="headerlink" title="2.安装Hexo框架"></a>2.安装Hexo框架</h4><p>首先安装淘宝的cnpm管理器（服务器在中国，速度快）：</p><p>npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a></p><p>测试安装是否成功：cnpm -v</p><p>安装Hexo框架：</p><p>cnpm install -g hexo-cli</p><p>测试安装是否成功：hexo -v</p><h4 id="3-安装Git"><a href="#3-安装Git" class="headerlink" title="3.安装Git"></a>3.安装Git</h4><p>下载地址：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p>测试安装是否成功：git –version</p><p>git在安装后需要配置一下用户名和邮箱信息，在命令行工具中输入如下命令：<br>git config –global user.name “你的用户名”<br>git config –global user.email “你的邮箱”</p><h2 id="二、使用Hexo框架搭建博客"><a href="#二、使用Hexo框架搭建博客" class="headerlink" title="二、使用Hexo框架搭建博客"></a>二、使用Hexo框架搭建博客</h2><h4 id="1-创建并进入项目文件夹-blog，并在该目录下打开cmd"><a href="#1-创建并进入项目文件夹-blog，并在该目录下打开cmd" class="headerlink" title="1.创建并进入项目文件夹-blog，并在该目录下打开cmd"></a>1.创建并进入项目文件夹-blog，并在该目录下打开cmd</h4><h4 id="2-通过命令初始化博客"><a href="#2-通过命令初始化博客" class="headerlink" title="2.通过命令初始化博客"></a>2.通过命令初始化博客</h4><p>hexo init    此时该文件夹下生成了项目文件</p><h4 id="3-运行hexo服务器启动本地博客服务"><a href="#3-运行hexo服务器启动本地博客服务" class="headerlink" title="3.运行hexo服务器启动本地博客服务"></a>3.运行hexo服务器启动本地博客服务</h4><p>hexo s    会出现一个本地访问地址可以预览博客</p><h4 id="4-创建文章"><a href="#4-创建文章" class="headerlink" title="4.创建文章"></a>4.创建文章</h4><p>hexo n “文章标题”</p><h4 id="5-更新文章"><a href="#5-更新文章" class="headerlink" title="5.更新文章"></a>5.更新文章</h4><p>hexo clean    清理缓存</p><p>hexo g    生成解析</p><p>hexo s    本地预览</p><h2 id="三、将本地博客部署到github"><a href="#三、将本地博客部署到github" class="headerlink" title="三、将本地博客部署到github"></a>三、将本地博客部署到github</h2><h4 id="1-登录github并创建仓库"><a href="#1-登录github并创建仓库" class="headerlink" title="1.登录github并创建仓库"></a>1.登录github并创建仓库</h4><p>仓库命名格式：github用户名.github.io</p><h4 id="2-在本地项目中安装git部署插件"><a href="#2-在本地项目中安装git部署插件" class="headerlink" title="2.在本地项目中安装git部署插件"></a>2.在本地项目中安装git部署插件</h4><p>cnpm install –save hexo-deployer-git    save表示仅在本地中安装</p><h4 id="3-修改根目录下的配置文件-config-yml"><a href="#3-修改根目录下的配置文件-config-yml" class="headerlink" title="3.修改根目录下的配置文件_config.yml"></a>3.修改根目录下的配置文件_config.yml</h4><p>url: <a href="https://yourgithubname.github.io/">https://YourGithubName.github.io</a></p><p>-—-</p><p>​    deploy:<br>          type: git<br>         repo: <a href="https://github.com/YourGithubName/YourGithubName.github.io.git">https://github.com/YourGithubName/YourGithubName.github.io.git</a><br>          branch: master<br>-—-</p><p><em>Hexo的_config.yml文件中每一项详解请转到：<a href="https://hexo.io/zh-cn/docs/configuration.html">https://hexo.io/zh-cn/docs/configuration.html</a></em></p><h4 id="4-部署到github"><a href="#4-部署到github" class="headerlink" title="4.部署到github"></a>4.部署到github</h4><p>hexo -d </p><p>访问这个地址可以查看博客：<a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a>  </p><h4 id="四、更换主题"><a href="#四、更换主题" class="headerlink" title="四、更换主题"></a>四、更换主题</h4><h4 id="1-将主题文件夹下载到本地的themes文件夹下。"><a href="#1-将主题文件夹下载到本地的themes文件夹下。" class="headerlink" title="1.将主题文件夹下载到本地的themes文件夹下。"></a>1.将主题文件夹下载到本地的themes文件夹下。</h4><p>主题地址：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a>    </p><h4 id="2-修改根目录下-config配置文件"><a href="#2-修改根目录下-config配置文件" class="headerlink" title="2.修改根目录下_config配置文件"></a>2.修改根目录下_config配置文件</h4><p>theme: hexo-theme-butterfly-3.4.1    注意：themes文件夹下的主题文件夹叫什么此处填写什么</p><h4 id="3-更新并重新部署"><a href="#3-更新并重新部署" class="headerlink" title="3.更新并重新部署"></a>3.更新并重新部署</h4><p>hexo clean</p><p>hexo g</p><p>hexo s</p><p>hexo d</p><h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><p>1.githup SSH配置</p><p>运行git-bash.exe输入ssh-keygen -t rsa -C “GitHub的注册邮箱地址”命令后，一直回车。然后到C:\Users\Serein.ssh目录下找到id_rsa.pub文件并打开，添加到GitHub的SSH keys中。</p><p><a href="https://www.jianshu.com/p/1246cfdbe460">https://www.jianshu.com/p/1246cfdbe460</a></p><p><a href="https://songlee24.github.io/2015/05/03/public-key-and-private-key/">https://songlee24.github.io/2015/05/03/public-key-and-private-key/</a></p><p>2.因为在2020年10月1日起，GitHub默认主分支从master更名为main，以上的提交方式会默认创建一个master分支，为保持一致性，可以将GitHub的默认主分支改为master</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、环境搭建&quot;&gt;&lt;a href=&quot;#一、环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一、环境搭建&quot;&gt;&lt;/a&gt;一、环境搭建&lt;/h2&gt;&lt;h4 id=&quot;1-安装nodejs&quot;&gt;&lt;a href=&quot;#1-安装nodejs&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="教程" scheme="https://mao0824.github.io.git/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="博客搭建" scheme="https://mao0824.github.io.git/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
